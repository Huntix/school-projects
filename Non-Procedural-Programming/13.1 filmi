(defun readList (l)
   (LET ((name1))
     (setq name1  (read-delimited-list #\]))  (terpri)
     (setq l (append l name1 ))
  )
)

(defun makeMovie (id  name1 director1 scriptW1 prop1)
	(setf (get ID 'name) name1)
	(setf (get id 'director) director1)
	(setf (get id 'scriptW) scriptW1)
	(setf (get id 'prop) prop1)
id
)
(defun makeMovieList (l)
  (LET ((id1 ) (name1) (director1) (scriptW1) (prop1))
	(LOOP 
		(princ "Enter movie id/ 0 - for exit")(terpri)
		(setq id1  (read)) (terpri)
		(when (equal id1 0 ) (return l) ) (terpri)
		(princ "Enter movie name")  (terpri)
		(setq name1 (readList '()))  (terpri)
		(princ "Enter movie director name")  (terpri)
		(setq director1 (readList '() ))  (terpri)
		(princ "Enter movie script-writer name")  (terpri)
		(setq scriptW1 (read))  (terpri)
		(princ "Enter movie propagator")  (terpri)
		(setq prop1 (read))  (terpri)
		(setq l (append l (list (makeMovie id1 name1 director1 scriptW1 prop1))))
	)
    )
)
(defun findScrW (list scr)
  (cond ((null list) '())
        ((equal (get (car list) 'scriptW) scr) (cons (append (list (get (car list) 'name) (get (car list) 'director)) '(end)) (findScrW (cdr list) scr)))
        (t (findScrW (cdr list) scr))
  )
)
